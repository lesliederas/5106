# -*- coding: utf-8 -*-
"""HW2_Problem3.Py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15hQH8a9eXkx-HuJ5NQfZiaivdtl7PKnI
"""

import torch
import torchvision
import torchvision.transforms as transforms
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import matplotlib.pyplot as plt

class BasicBlock(nn.Module):
    expansion = 1

    def __init__(self, in_channels, out_channels, stride=1):
        super(BasicBlock, self).__init__()
        self.conv1 = nn.Conv2d(in_channels, out_channels, kernel_size=3, stride=stride, padding=1, bias=False)
        self.bn1 = nn.BatchNorm2d(out_channels)
        self.conv2 = nn.Conv2d(out_channels, out_channels, kernel_size=3, stride=1, padding=1, bias=False)
        self.bn2 = nn.BatchNorm2d(out_channels)
        self.shortcut = nn.Sequential()
        if stride != 1 or in_channels != self.expansion * out_channels:
            self.shortcut = nn.Sequential(
                nn.Conv2d(in_channels, self.expansion * out_channels, kernel_size=1, stride=stride, bias=False),
                nn.BatchNorm2d(self.expansion * out_channels)
            )

    def forward(self, x):
        out = F.relu(self.bn1(self.conv1(x)))
        out = self.bn2(self.conv2(out))
        out += self.shortcut(x)
        out = F.relu(out)
        return out

class ResNet(nn.Module):
    def __init__(self, block, num_blocks, num_classes=10):
        super(ResNet, self).__init__()
        self.in_channels = 64
        self.conv1 = nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1, bias=False)
        self.bn1 = nn.BatchNorm2d(64)
        self.layer1 = self._make_layer(block, 64, num_blocks[0], stride=1)
        self.layer2 = self._make_layer(block, 128, num_blocks[1], stride=2)
        self.layer3 = self._make_layer(block, 256, num_blocks[2], stride=2)
        self.layer4 = self._make_layer(block, 512, num_blocks[3], stride=2)
        self.linear = nn.Linear(512 * block.expansion, num_classes)

    def _make_layer(self, block, out_channels, num_blocks, stride):
        strides = [stride] + [1] * (num_blocks - 1)
        layers = []
        for stride in strides:
            layers.append(block(self.in_channels, out_channels, stride))
            self.in_channels = out_channels * block.expansion
        return nn.Sequential(*layers)

    def forward(self, x):
        out = F.relu(self.bn1(self.conv1(x)))
        out = self.layer1(out)
        out = self.layer2(out)
        out = self.layer3(out)
        out = self.layer4(out)
        out = F.avg_pool2d(out, 4)
        out = out.view(out.size(0), -1)
        out = self.linear(out)
        return out

# Define ResNet-11 and ResNet-18 architectures
resnet11 = ResNet(BasicBlock, [1, 1, 1, 1])
resnet18 = ResNet(BasicBlock, [2, 2, 2, 2])

def train_and_evaluate(model, trainloader, testloader, device, epochs=10):
    model = model.to(device)
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)
    train_loss_list, val_loss_list, val_acc_list = [], [], []

    for epoch in range(epochs):
        running_loss = 0.0
        model.train()
        for inputs, labels in trainloader:
            inputs, labels = inputs.to(device), labels.to(device)
            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            running_loss += loss.item()
        train_loss_list.append(running_loss / len(trainloader))

        # Validation
        correct, total, val_loss = 0, 0, 0.0
        model.eval()
        with torch.no_grad():
            for inputs, labels in testloader:
                inputs, labels = inputs.to(device), labels.to(device)
                outputs = model(inputs)
                loss = criterion(outputs, labels)
                val_loss += loss.item()
                _, predicted = torch.max(outputs, 1)
                total += labels.size(0)
                correct += (predicted == labels).sum().item()
        val_loss_list.append(val_loss / len(testloader))
        val_acc_list.append(100 * correct / total)
        print(f'Epoch {epoch+1}: Train Loss: {train_loss_list[-1]:.4f}, Val Loss: {val_loss_list[-1]:.4f}, Val Acc: {val_acc_list[-1]:.2f}%')

    return train_loss_list, val_loss_list, val_acc_list

# Load CIFAR-10 and CIFAR-100 datasets
def load_data(dataset="cifar10"):
    transform = transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
    ])
    if dataset == "cifar10":
        trainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
        testset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)
    else:
        trainset = torchvision.datasets.CIFAR100(root='./data', train=True, download=True, transform=transform)
        testset = torchvision.datasets.CIFAR100(root='./data', train=False, download=True, transform=transform)

    trainloader = torch.utils.data.DataLoader(trainset, batch_size=64, shuffle=True, num_workers=2)
    testloader = torch.utils.data.DataLoader(testset, batch_size=64, shuffle=False, num_workers=2)

    return trainloader, testloader

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Train and evaluate ResNet-11 and ResNet-18 on CIFAR-10
trainloader, testloader = load_data("cifar10")
print("Training ResNet-11 on CIFAR-10")
train_res11, val_res11, acc_res11 = train_and_evaluate(resnet11, trainloader, testloader, device)
print("Training ResNet-18 on CIFAR-10")
train_res18, val_res18, acc_res18 = train_and_evaluate(resnet18, trainloader, testloader, device)

# Compare results
print(f"ResNet-11 Accuracy: {acc_res11[-1]:.2f}%")
print(f"ResNet-18 Accuracy: {acc_res18[-1]:.2f}%")
print(f"ResNet-11 Parameters: {sum(p.numel() for p in resnet11.parameters()):,}")
print(f"ResNet-18 Parameters: {sum(p.numel() for p in resnet18.parameters()):,}")

plt.figure(figsize=(12,5))
plt.subplot(2, 3, 1)
train_res11, val_res11, acc_res11
plt.plot(train_res11, label='Training Loss 11')
plt.plot(train_res18, label='Training Loss 18')
plt.xlabel('Epochs')
plt.ylabel(' Training Loss')
plt.title('Training Loss ResNet 11 & 18')
plt.subplot(2, 3, 2)
plt.plot(val_res11, label=' validation Loss 11')
plt.plot(val_res18, label=' validation Loss 18')
plt.xlabel('Epochs')
plt.ylabel(' Validation Loss')
plt.legend()
plt.title('Validation Loss ResNet 11 & 18')

plt.subplot(2, 3,3 )
plt.plot(acc_res11, label='Validation Accuracy 11', color='green')
plt.plot(acc_res18, label='Validation Accuracy 18', color='blue')
plt.xlabel('Epochs')
plt.ylabel('Accuracy (%)')
plt.legend()
plt.title('Validation Accuracy ResNet 11 & 18')
plt.show()